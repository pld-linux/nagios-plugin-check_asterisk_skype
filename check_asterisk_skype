#!/usr/bin/perl -w
# 2010 Elan Ruusamäe <glen@delfi.ee>
# License: GPL v2

# Setup:
# You need nagios (or nagios nrpe) to have access to asterisk socket.
# You need to change permissions in [files] section of /etc/asterisk/asterisk.conf
# and if you run asterisk under asterisk user, you need to add nagios uid to
# asterisk group (or vice versa: asterisk to nagios group) as asterisk can't
# change it's user/group after dropping privs.

use strict;
use Getopt::Long;
my(%opts);
my(%ERRORS) = (OK => 0, WARNING => 1, CRITICAL => 2, UNKNOWN => 3);
my($VERSION) = '0.1';
my($message, $status);

#####################################################################
sub print_usage() {
	print "Usage: check_asterisk_skype\n";
	print "       check_raid -v\n";
	print "       check_raid -h\n";
}

sub print_help() {
	print "check_asterisk_skype, v$VERSION\n";
	print "Copyright (c) 2010 Elan Ruusamäe <glen\@delfi.ee>

This plugin reports the asterisk skype status
";
	print_usage();
}

sub check_skype_license {

	my $pid = open(my $fh, '-|');
	if ($pid == 0) {
		# child
		# redirect stderr
		open STDERR, '>&STDOUT';
		my @CMD = ('asterisk', '-rx', 'skype show licenses');
		exec @CMD or die "ERROR: Could not execute '@CMD': $!\n";

	} elsif($pid == -1) {
		die("fork() failed");
	}

	# parent
	while (<$fh>) {
		chomp;

		if (my($file, $key, $expires, $hostid, $channels, $state) = m/
			File:\s+(\S+)\s+--\s+
			Key:\s+(\S+)\s+--\s+
			Expires:\s+([-\d]+)\s+--\s+
			Host-ID:\s+([\da-f:]+)\s+--\s+
			Channels:\s+(\d+)\s+\((\S+)\)
			/x) {
			$message .= "License $state: $channels channels, expires $expires";
			if ($state ne 'OK') {
				$status = $ERRORS{CRITICAL};
			}
			next;
		}

		# This proceses STDERR messages
		if (/ERROR:|Unable to connect/) {
			$status = $ERRORS{CRITICAL};
			$message .= $_;
			next;
		}
	}
	close $fh || die "asterisk exited with: $?\n";
}

sub check_skype_user {

	my $pid = open(my $fh, '-|');
	if ($pid == 0) {
		# child
		# redirect stderr
		open STDERR, '>&STDOUT';
		my @CMD = ('asterisk', '-rx', 'skype show users');
		exec @CMD or die "ERROR: Could not execute '@CMD': $!\n";

	} elsif($pid == -1) {
		die("fork() failed");
	}

	# parent
	my $in = 0;
	my @status;
	while (<$fh>) {
		chomp;

		$in = 1,next if /Skype Users/;
		next unless $in;

		if (my ($user, $state) = /^(\S+):\s+(.*)/) {
			push(@status, $state);
			# Connecting to P2P Network => WARNING
			# Connecting to Server => WARNING
			# Logged In => OK
			# Logged Out => CRITICAL
			if ($state eq 'Logged Out') {
				$status = $ERRORS{CRITICAL};
			} elsif ($state ne 'Logged In') {
				# assume warning
				$status = $ERRORS{WARNING} unless $status;
			}
			next;
		}

		# This proceses STDERR messages
		if (/ERROR:|Unable to connect/) {
			$status = $ERRORS{CRITICAL};
			$message .= $_;
			next;
		}
	}
	close $fh || die "asterisk exited with: $?\n";

	if (@status) {
		$message .= "; User: ".join(', ', @status);
	} else {
		$status = $ERRORS{CRITICAL};
		$message .= "; No skype user setup";
	}
}

# grab skypeout balance from custom log produced in /etc/asterisk/extensions.ael:
# replace ${SKYPEACCOUNT} with your skype account name
# Set(DATETIME=${STRFTIME(${EPOCH},Europe/Tallinn,%Y-%m-%d %H:%M:%S)});
# System(echo '${DATETIME} CALL ENDED: balance: $[${SKYPE_ACCOUNT_PROPERTY(${SKYPEACCOUNT},skypeout_balance)}/100] EUR' >> /var/log/asterisk/calls.log);
sub check_skype_calls {
	# TODO: add command line opts support
	my $logfile = '/var/log/asterisk/calls.log';
	my $warning = 2.5;
	my $critical = 0.5;

	open(my $fh, '<', $logfile) or die "Can't open $logfile: $!\n";
	my @lines = reverse <$fh>;
	close $fh;

	my $seen = 0;
	while ($_ = pop(@lines)) {
		if (my($balance, $currency) = /balance: ([\d.]+) (\S{3})/) {
			$seen = 1;
			my $state;
			if ($balance < $critical) {
				$state = 'CRITICAL';
				$status = $ERRORS{CRITICAL};
			} elsif ($balance < $warning) {
				$state = 'WARNING';
				$status = $ERRORS{WARNING};
			} else {
				$state = 'OK';
			}
			$message .= sprintf "; Balance %s: %.2f %s", $state, $balance, $currency;
			last;
		}
	}
}

#####################################################################
$ENV{'BASH_ENV'} = '';
$ENV{'ENV'} = '';

Getopt::Long::Configure('bundling');
GetOptions(
	"v" => \$opts{v}, "version" => \$opts{v},
	"h" => \$opts{h}, "help" => \$opts{h},
	"d" => \$opts{d}, "debug" => \$opts{d},
);

if ($opts{v}) {
	print "check_raid Version $VERSION\n";
	exit $ERRORS{'OK'};
}
if ($opts{h}) {
	print_help();
	exit $ERRORS{'OK'};
}

$status = $ERRORS{OK};
$message = '';

check_skype_license;
check_skype_user;
check_skype_calls;

if ($message) {
	if ($status == $ERRORS{OK}) {
		print "OK: ";
	} elsif ($status == $ERRORS{WARNING}) {
		print "WARNING: ";
	} elsif ($status == $ERRORS{CRITICAL}) {
		print "CRITICAL: ";
	} else {
		print "UNKNOWN: ";
	}
	print "$message\n";
} else {
	$status = $ERRORS{UNKNOWN};
	print "Something went very wrong.\n";
}
exit $status;
